---
source: crates/clogbox-derive/src/enum.rs
expression: "prettyplease::unparse(&syn::parse_file(&output).unwrap())"
---
#[automatically_derived]
impl ::clogbox_enum::Enum for Outer
where
    ::clogbox_enum::typenum::U1: ::std::ops::Add<<Inner as ::clogbox_enum::Enum>::Count>,
    <::clogbox_enum::typenum::U1 as ::std::ops::Add<
        <Inner as ::clogbox_enum::Enum>::Count,
    >>::Output: ::std::ops::Add<<Inner as ::clogbox_enum::Enum>::Count>,
    <<::clogbox_enum::typenum::U1 as ::std::ops::Add<
        <Inner as ::clogbox_enum::Enum>::Count,
    >>::Output as ::std::ops::Add<
        <Inner as ::clogbox_enum::Enum>::Count,
    >>::Output: ::clogbox_enum::generic_array::ArrayLength,
{
    type Count = ::clogbox_enum::typenum::operator_aliases::Sum<
        ::clogbox_enum::typenum::U1,
        ::clogbox_enum::typenum::operator_aliases::Sum<
            <Inner as ::clogbox_enum::Enum>::Count,
            <Inner as ::clogbox_enum::Enum>::Count,
        >,
    >;
    fn from_usize(mut i: usize) -> Self {
        if i == 0 {
            return Self::A;
        } else {
            i -= 1;
        }
        if i
            < <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE
        {
            return Self::B(<Inner as ::clogbox_enum::Enum>::from_usize(i));
        } else {
            i
                -= <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        if i
            < <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE
        {
            return Self::C(<Inner as ::clogbox_enum::Enum>::from_usize(i));
        } else {
            i
                -= <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        unreachable!();
    }
    fn to_usize(self) -> usize {
        let mut i = 0;
        if let Self::A = self {
            return i;
        } else {
            i += 1;
        }
        if let Self::B(value) = self {
            return i + value.to_usize();
        } else {
            i
                += <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        if let Self::C(value) = self {
            return i + value.to_usize();
        } else {
            i
                += <<Inner as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        unreachable!()
    }
    fn name(&self) -> ::std::borrow::Cow<str> {
        match self {
            Self::A => ::std::borrow::Cow::from("A"),
            Self::B(inner) => ::std::borrow::Cow::Owned(format!("B {}", inner.name())),
            Self::C(inner) => inner.name(),
        }
    }
}
