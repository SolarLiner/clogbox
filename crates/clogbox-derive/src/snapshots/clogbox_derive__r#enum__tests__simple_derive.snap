---
source: crates/clogbox-derive/src/enum.rs
expression: format_output(from_derive_input)
---
#[automatically_derived]
impl ::clogbox_core::r#enum::az::CastFrom<usize> for Params {
    fn cast_from(mut i: usize) -> Self {
        if i == 0 {
            return Self::Cutoff;
        } else {
            i -= 1;
        }
        if i == 0 {
            return Self::Resonance;
        } else {
            i -= 1;
        }
        if i == 0 {
            return Self::Drive;
        } else {
            i -= 1;
        }
        if i == 0 {
            return Self::InputFM;
        } else {
            i -= 1;
        }
        unreachable!();
    }
}
#[automatically_derived]
impl ::clogbox_core::r#enum::az::Cast<usize> for Params {
    fn cast(self) -> usize {
        let mut i = 0;
        if let Self::Cutoff = self {
            return i;
        } else {
            i += 1;
        }
        if let Self::Resonance = self {
            return i;
        } else {
            i += 1;
        }
        if let Self::Drive = self {
            return i;
        } else {
            i += 1;
        }
        if let Self::InputFM = self {
            return i;
        } else {
            i += 1;
        }
        unreachable!()
    }
}
#[automatically_derived]
impl ::clogbox_core::r#enum::Enum for Params {
    type Count = ::clogbox_core::r#enum::typenum::U4;
    fn name(&self) -> ::std::borrow::Cow<str> {
        match self {
            Self::Cutoff => ::std::borrow::Cow::from("Cutoff"),
            Self::Resonance => ::std::borrow::Cow::from("Resonance"),
            Self::Drive => ::std::borrow::Cow::from("Drive"),
            Self::InputFM => ::std::borrow::Cow::from("Input FM"),
        }
    }
}
