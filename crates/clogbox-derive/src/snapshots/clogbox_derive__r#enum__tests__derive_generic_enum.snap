---
source: crates/clogbox-derive/src/enum.rs
expression: format_output(from_derive_input)
---
#[automatically_derived]
impl<T: ::clogbox_enum::Enum> ::clogbox_enum::Enum for Generic<T>
where
    ::clogbox_enum::typenum::U1: ::std::ops::Add<<T as ::clogbox_enum::Enum>::Count>,
    <::clogbox_enum::typenum::U1 as ::std::ops::Add<
        <T as ::clogbox_enum::Enum>::Count,
    >>::Output: ::std::ops::Add<<T as ::clogbox_enum::Enum>::Count>,
    <<::clogbox_enum::typenum::U1 as ::std::ops::Add<
        <T as ::clogbox_enum::Enum>::Count,
    >>::Output as ::std::ops::Add<
        <T as ::clogbox_enum::Enum>::Count,
    >>::Output: ::clogbox_enum::typenum::Unsigned
        + ::clogbox_enum::generic_array::ArrayLength,
{
    type Count = <<::clogbox_enum::typenum::U1 as std::ops::Add<
        <T as ::clogbox_enum::Enum>::Count,
    >>::Output as std::ops::Add<<T as ::clogbox_enum::Enum>::Count>>::Output;
    fn from_usize(mut i: usize) -> Self {
        if i
            < <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE
        {
            return Self::VariantA(<T as ::clogbox_enum::Enum>::from_usize(i));
        } else {
            i
                -= <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        if i == 0 {
            return Self::VariantB;
        } else {
            i -= 1;
        }
        if i
            < <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE
        {
            return Self::SpecialVariant(<T as ::clogbox_enum::Enum>::from_usize(i));
        } else {
            i
                -= <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        unreachable!();
    }
    fn to_usize(self) -> usize {
        let mut i = 0;
        if let Self::VariantA(value) = self {
            return i + value.to_usize();
        } else {
            i
                += <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        if let Self::VariantB = self {
            return i;
        } else {
            i += 1;
        }
        if let Self::SpecialVariant(value) = self {
            return i + value.to_usize();
        } else {
            i
                += <<T as ::clogbox_enum::Enum>::Count as ::clogbox_enum::typenum::Unsigned>::USIZE;
        }
        unreachable!()
    }
    fn name(&self) -> ::std::borrow::Cow<str> {
        match self {
            Self::VariantA(inner) => inner.name(),
            Self::VariantB => ::std::borrow::Cow::from("VariantB"),
            Self::SpecialVariant(inner) => {
                ::std::borrow::Cow::Owned(format!("Special {}", inner.name()))
            }
        }
    }
}
